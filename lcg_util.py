# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lcg_util', [dirname(__file__)])
        except ImportError:
            import _lcg_util
            return _lcg_util
        if fp is not None:
            try:
                _mod = imp.load_module('_lcg_util', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lcg_util = swig_import_helper()
    del swig_import_helper
else:
    import _lcg_util
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


TYPE_NONE = _lcg_util.TYPE_NONE
TYPE_SRM = _lcg_util.TYPE_SRM
TYPE_SRMv2 = _lcg_util.TYPE_SRMv2
TYPE_SE = _lcg_util.TYPE_SE
GFAL_CKSM_NONE = _lcg_util.GFAL_CKSM_NONE
GFAL_CKSM_CRC32 = _lcg_util.GFAL_CKSM_CRC32
GFAL_CKSM_ADLER32 = _lcg_util.GFAL_CKSM_ADLER32
GFAL_CKSM_MD5 = _lcg_util.GFAL_CKSM_MD5
GFAL_CKSM_SHA1 = _lcg_util.GFAL_CKSM_SHA1

def lcg_util_version():
  return _lcg_util.lcg_util_version()
lcg_util_version = _lcg_util.lcg_util_version

def lcg_gt(*args):
  return _lcg_util.lcg_gt(*args)
lcg_gt = _lcg_util.lcg_gt

def lcg_gt2(*args):
  return _lcg_util.lcg_gt2(*args)
lcg_gt2 = _lcg_util.lcg_gt2

def lcg_gt3(*args):
  return _lcg_util.lcg_gt3(*args)
lcg_gt3 = _lcg_util.lcg_gt3

def lcg_la(*args):
  return _lcg_util.lcg_la(*args)
lcg_la = _lcg_util.lcg_la

def lcg_lax(*args):
  return _lcg_util.lcg_lax(*args)
lcg_lax = _lcg_util.lcg_lax

def lcg_la2(*args):
  return _lcg_util.lcg_la2(*args)
lcg_la2 = _lcg_util.lcg_la2

def lcg_lr(*args):
  return _lcg_util.lcg_lr(*args)
lcg_lr = _lcg_util.lcg_lr

def lcg_lrx(*args):
  return _lcg_util.lcg_lrx(*args)
lcg_lrx = _lcg_util.lcg_lrx

def lcg_lr2(*args):
  return _lcg_util.lcg_lr2(*args)
lcg_lr2 = _lcg_util.lcg_lr2

def lcg_lr3(*args):
  return _lcg_util.lcg_lr3(*args)
lcg_lr3 = _lcg_util.lcg_lr3

def lcg_cp(*args):
  return _lcg_util.lcg_cp(*args)
lcg_cp = _lcg_util.lcg_cp

def lcg_cp2(*args):
  return _lcg_util.lcg_cp2(*args)
lcg_cp2 = _lcg_util.lcg_cp2

def lcg_cp3(*args):
  return _lcg_util.lcg_cp3(*args)
lcg_cp3 = _lcg_util.lcg_cp3

def lcg_cp4(*args):
  return _lcg_util.lcg_cp4(*args)
lcg_cp4 = _lcg_util.lcg_cp4

def lcg_lg(*args):
  return _lcg_util.lcg_lg(*args)
lcg_lg = _lcg_util.lcg_lg

def lcg_lgx(*args):
  return _lcg_util.lcg_lgx(*args)
lcg_lgx = _lcg_util.lcg_lgx

def lcg_lg2(*args):
  return _lcg_util.lcg_lg2(*args)
lcg_lg2 = _lcg_util.lcg_lg2

def lcg_uf(*args):
  return _lcg_util.lcg_uf(*args)
lcg_uf = _lcg_util.lcg_uf

def lcg_ufx(*args):
  return _lcg_util.lcg_ufx(*args)
lcg_ufx = _lcg_util.lcg_ufx

def lcg_uf3(*args):
  return _lcg_util.lcg_uf3(*args)
lcg_uf3 = _lcg_util.lcg_uf3

def lcg_uf4(*args):
  return _lcg_util.lcg_uf4(*args)
lcg_uf4 = _lcg_util.lcg_uf4

def lcg_del(*args):
  return _lcg_util.lcg_del(*args)
lcg_del = _lcg_util.lcg_del

def lcg_delxt(*args):
  return _lcg_util.lcg_delxt(*args)
lcg_delxt = _lcg_util.lcg_delxt

def lcg_del3(*args):
  return _lcg_util.lcg_del3(*args)
lcg_del3 = _lcg_util.lcg_del3

def lcg_del4(*args):
  return _lcg_util.lcg_del4(*args)
lcg_del4 = _lcg_util.lcg_del4

def lcg_del5(*args):
  return _lcg_util.lcg_del5(*args)
lcg_del5 = _lcg_util.lcg_del5

def lcg_del6(*args):
  return _lcg_util.lcg_del6(*args)
lcg_del6 = _lcg_util.lcg_del6

def lcg_del7(*args):
  return _lcg_util.lcg_del7(*args)
lcg_del7 = _lcg_util.lcg_del7

def lcg_aa(*args):
  return _lcg_util.lcg_aa(*args)
lcg_aa = _lcg_util.lcg_aa

def lcg_aax(*args):
  return _lcg_util.lcg_aax(*args)
lcg_aax = _lcg_util.lcg_aax

def lcg_aa2(*args):
  return _lcg_util.lcg_aa2(*args)
lcg_aa2 = _lcg_util.lcg_aa2

def lcg_ra(*args):
  return _lcg_util.lcg_ra(*args)
lcg_ra = _lcg_util.lcg_ra

def lcg_rax(*args):
  return _lcg_util.lcg_rax(*args)
lcg_rax = _lcg_util.lcg_rax

def lcg_ra2(*args):
  return _lcg_util.lcg_ra2(*args)
lcg_ra2 = _lcg_util.lcg_ra2

def lcg_rep(*args):
  return _lcg_util.lcg_rep(*args)
lcg_rep = _lcg_util.lcg_rep

def lcg_rep2(*args):
  return _lcg_util.lcg_rep2(*args)
lcg_rep2 = _lcg_util.lcg_rep2

def lcg_rep3(*args):
  return _lcg_util.lcg_rep3(*args)
lcg_rep3 = _lcg_util.lcg_rep3

def lcg_rep4(*args):
  return _lcg_util.lcg_rep4(*args)
lcg_rep4 = _lcg_util.lcg_rep4

def lcg_sd(*args):
  return _lcg_util.lcg_sd(*args)
lcg_sd = _lcg_util.lcg_sd

def lcg_sdxt(*args):
  return _lcg_util.lcg_sdxt(*args)
lcg_sdxt = _lcg_util.lcg_sdxt

def lcg_sd3(*args):
  return _lcg_util.lcg_sd3(*args)
lcg_sd3 = _lcg_util.lcg_sd3

def lcg_cr(*args):
  return _lcg_util.lcg_cr(*args)
lcg_cr = _lcg_util.lcg_cr

def lcg_cr2(*args):
  return _lcg_util.lcg_cr2(*args)
lcg_cr2 = _lcg_util.lcg_cr2

def lcg_cr3(*args):
  return _lcg_util.lcg_cr3(*args)
lcg_cr3 = _lcg_util.lcg_cr3

def lcg_cr4(*args):
  return _lcg_util.lcg_cr4(*args)
lcg_cr4 = _lcg_util.lcg_cr4

def lcg_rf(*args):
  return _lcg_util.lcg_rf(*args)
lcg_rf = _lcg_util.lcg_rf

def lcg_rfxt(*args):
  return _lcg_util.lcg_rfxt(*args)
lcg_rfxt = _lcg_util.lcg_rfxt

def lcg_rf3(*args):
  return _lcg_util.lcg_rf3(*args)
lcg_rf3 = _lcg_util.lcg_rf3

def lcg_stmd(*args):
  return _lcg_util.lcg_stmd(*args)
lcg_stmd = _lcg_util.lcg_stmd

def lcg_get_checksum(*args):
  return _lcg_util.lcg_get_checksum(*args)
lcg_get_checksum = _lcg_util.lcg_get_checksum


